{"version":3,"sources":["components/Modal.js","components/ModalChild.js","components/Crown.js","components/Card.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Modal","props","modalRoot","document","getElementById","el","createElement","useEffect","appendChild","removeChild","ReactDOM","createPortal","children","ModalChild","className","title","onClick","handleUpdate","icon","faCheck","handleDelete","faTrash","Crown","status","percent","fixedDays","days","max","value","min","i","percentage","icons","statusArea","crown","faCrown","style","index","push","faGem","setIcons","map","item","name","position","zIndex","left","backgroundColor","width","maxWidth","height","borderRadius","progressBar","Card","useState","modal","showModal","bronze","statusMark","color","margin","silver","gold","diamond","startDate","checkStatus","updated","update","newChallenges","JSON","parse","localStorage","getItem","filter","obj","id","setItem","stringify","quotes","quote","App","setQuote","challenge","setChallenge","text","setText","challenges","setChallenges","random","Math","floor","length","getQuote","lastLoggedDate","date","Date","getDate","getMonth","getFullYear","type","placeholder","onChange","e","target","dateString","now","saveChallege","aria-label","faTimes","faPlus","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.88c918ce.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport function Modal(props) {\r\n    const modalRoot = document.getElementById('modal-root');\r\n    const el = document.createElement('div');\r\n\r\n    useEffect(() => {\r\n        modalRoot.appendChild(el);\r\n        return () => {\r\n            modalRoot.removeChild(el);\r\n        };\r\n    });\r\n\r\n    return ReactDOM.createPortal(props.children, el);\r\n    // return <h1>{props.child}</h1>\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport function ModalChild(props) {\r\n    return (\r\n        <div className=\"Modal-container\">\r\n            <div className=\"Modal-content\">\r\n                <div className=\"Modal-title\">{props.title}</div>\r\n                <button className=\"Log-button\" onClick={() => props.handleUpdate()}>\r\n                    <div>Done</div> \r\n                    <FontAwesomeIcon icon={faCheck} />\r\n                </button>\r\n                <button className=\"Delete-button\" onClick={() => props.handleDelete()}>\r\n                    <span>Delete challenge</span>\r\n                    <FontAwesomeIcon icon={faTrash} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCrown, faGem } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport function Crown(props) {\r\n    const status = props.status;\r\n    const percent = percentage();\r\n    // Calculate past percentage of days in the correct statusarea\r\n    function percentage() {\r\n        let days = 0;\r\n        let fixedDays;\r\n        let percentage;\r\n\r\n        // If value is more than min, reduce min from value to get correct\r\n        // percentage of current statusarea. \r\n        // example value is 100 days, min is 80 and max 120 in the current statusarea. \r\n        // Without reduction value is more than days between min and max so percentage is over 100%.\r\n        if (status.max !== null) {\r\n            if (props.value > status.min) {\r\n                fixedDays = props.value - status.min;\r\n            } else {\r\n                fixedDays = props.value;\r\n            }\r\n\r\n            // Calculate days amount between min and max\r\n            for (let i = status.min; i <= status.max; i++) {\r\n                days = days + 1;\r\n            }\r\n\r\n            // Calculate past percentage of days\r\n            return percentage = fixedDays / days * 100;\r\n        } else {\r\n            return percentage = 100;\r\n        }\r\n    }\r\n\r\n    // Progressbar style\r\n    function progressBar(percent) {\r\n        return (\r\n            {\r\n                position: 'absolute',\r\n                zIndex: 10,\r\n                left: 0,\r\n                backgroundColor: 'green',\r\n                width: `${percent}%`,\r\n                maxWidth: '100%',\r\n                height: '10px',\r\n                borderRadius: 0\r\n            }\r\n        )\r\n    }\r\n\r\n    function setIcons() {\r\n        let icons = [];\r\n        if (status.statusArea !== 4) {\r\n            const crown = <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n            for (let index = 0; index < status.statusArea; index++) {\r\n                icons.push(crown);\r\n            }\r\n        } else {\r\n            icons.push(<FontAwesomeIcon className=\"Icon\" icon={faGem} style={status.status} />);\r\n        }\r\n        return icons;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {setIcons().map((item, index) => (\r\n                <span key={index}>{item}</span>\r\n            ))}\r\n            <p>{`${status.status.name} - ${status.statusArea}`}</p>\r\n            <div className=\"Progress-bar\">\r\n                <span style={progressBar(percent)}></span>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { Modal } from \"./Modal\";\r\nimport { ModalChild } from './ModalChild';\r\nimport { Crown } from \"./Crown\";\r\n\r\nexport function Card(props) {\r\n\r\n  const [modal, showModal] = useState(false);\r\n\r\n  // Statuses\r\n  const bronze = { name: 'Bronze', statusMark: '&#x2160', color: '#cd7f32', margin: '10px' }\r\n  const silver = { name: 'Silver', statusMark: '&#x2160', color: '#C0C0C0', margin: '10px' }\r\n  const gold = { name: 'Gold', statusMark: '&#x21604', color: '#FFDF00', margin: '10px' }\r\n  const diamond = { name: 'diamond', statusMark: '&#x2160', color: '#66ccff', margin: '10px' }\r\n\r\n  // Check if index of card is even and set correct background.\r\n  function background() {\r\n    if (props.index % 2 === 0) {\r\n      return {\r\n        backgroundColor: \"#ffffff\",\r\n      };\r\n    } else {\r\n      return {\r\n        backgroundColor: \"#626262\",\r\n        color: 'white'\r\n      };\r\n    }\r\n  }\r\n\r\n  function checkStatus() {\r\n    let status;\r\n    let statusArea;\r\n    let min;\r\n    let max;\r\n\r\n    if (props.value >= 0 && props.value <= 40) {\r\n      status = bronze;\r\n      statusArea = 1;\r\n      min = 0;\r\n      max = 40;\r\n    }\r\n    else if (props.value >= 40 && props.value <= 80) {\r\n      status = bronze;\r\n      statusArea = 2;\r\n      min = 40;\r\n      max = 80;\r\n    }\r\n    else if (props.value >= 80 && props.value <= 120) {\r\n      status = bronze;\r\n      statusArea = 3;\r\n      min = 80;\r\n      max = 120;\r\n    }\r\n    else if (props.value >= 120 && props.value <= 160) {\r\n      status = silver;\r\n      statusArea = 1;\r\n      min = 120;\r\n      max = 160;\r\n    }\r\n    else if (props.value >= 160 && props.value <= 200) {\r\n      status = silver;\r\n      statusArea = 2;\r\n      min = 160;\r\n      max = 200;\r\n    }\r\n    else if (props.value >= 200 && props.value <= 240) {\r\n      status = silver;\r\n      statusArea = 3;\r\n      min = 200;\r\n      max = 240;\r\n    }\r\n    else if (props.value >= 240 && props.value <= 280) {\r\n      status = gold;\r\n      statusArea = 1;\r\n      min = 240;\r\n      max = 280;\r\n    }\r\n    else if (props.value >= 280 && props.value <= 320) {\r\n      status = gold;\r\n      statusArea = 2;\r\n      min = 280;\r\n      max = 320;\r\n    }\r\n    else if (props.value >= 320 && props.value <= 365) {\r\n      status = gold;\r\n      statusArea = 3;\r\n      min = 320;\r\n      max = 365;\r\n    } else if (props.value > 365) {\r\n      status = diamond;\r\n      statusArea = 4;\r\n      min = 365;\r\n      max = null;\r\n    }\r\n    return {\r\n      status,\r\n      statusArea,\r\n      min,\r\n      max\r\n    }\r\n  }\r\n\r\n  function handleUpdate() {\r\n    // alert('update')\r\n    if(props.updated === false) {\r\n      props.update();\r\n    }\r\n  }\r\n\r\n  function handleDelete() {\r\n    const challenges = JSON.parse(localStorage.getItem(\"challenges\"));\r\n    const newChallenges = challenges.filter(obj => obj.id !== props.id);\r\n    localStorage.setItem(\"challenges\", JSON.stringify(newChallenges));\r\n  }\r\n\r\n  return (\r\n    <div onClick={() => showModal(!modal)} className=\"Card\" style={background()}>\r\n      <span>Started {props.startDate} - {props.value} days</span>\r\n      <h3 className=\"Card-title\">{props.title}</h3>\r\n      <Crown status={checkStatus()} value={props.value} />\r\n      { modal ?\r\n        <Modal>\r\n          <ModalChild\r\n            title={props.title}\r\n            handleUpdate={() => handleUpdate()}\r\n            handleDelete={() => handleDelete()}\r\n          />\r\n        </Modal>\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { Card } from \"./components/Card\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./App.css\";\n\nconst quotes = [\n  {\n    quote: \"The way to get started is to quit talking and begin doing.\",\n    name: \"Walt Disney\"\n  },\n  {\n    quote: \"Just do it.\",\n    name: \"Nike\"\n  },\n  {\n    quote: \"The pessimist sees difficulty in every opportunity. The optimist sees the opportunity in every difficulty.\",\n    name: \"Winston Churchill\"\n  }\n]\nexport function App() {\n  const [quote, setQuote] = useState(null);\n  const [challenge, setChallenge] = useState(null);\n  const [text, setText] = useState(\"\");\n  const [challenges, setChallenges] = useState(null);\n\n  useEffect(() => {\n    getQuote();\n    const challenges = JSON.parse(localStorage.getItem(\"challenges\"));\n    setChallenges(challenges);\n  }, []);\n\n  function getQuote() {\n    const random = Math.floor(Math.random() * quotes.length);\n    quotes.map((item, index) => {\n      if (index === random) {\n        setQuote(item);\n      }\n    });\n  }\n\n  function saveChallege() {\n    const date = new Date();\n    const dateString = `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`;\n\n    if (text !== \"\") {\n      const challenges = JSON.parse(localStorage.getItem(\"challenges\"));\n      if (challenges !== null) {\n        const challenge = {\n          id: Date.now(),\n          title: text,\n          startDate: dateString,\n          lastLoggedDate: date,\n          value: 0,\n          updated: false\n        };\n        localStorage.setItem(\"challenges\", JSON.stringify([...challenges, challenge]));\n        setChallenges([\n          ...challenges,\n          challenge\n        ]);\n      } else {\n        const challenge = [{\n          id: Date.now(),\n          title: text,\n          startDate: dateString,\n          lastLoggedDate: date,\n          value: 0,\n          updated: false\n        }];\n        localStorage.setItem(\"challenges\", JSON.stringify(challenge));\n        setChallenges(challenge);\n      }\n    }\n    setChallenge(false);\n  }\n\n  function update(id) {\n    const date = new Date();\n    const dateString = `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`;\n    const challenges = JSON.parse(localStorage.getItem(\"challenges\"));\n    const newChallenges = challenges.map(obj =>\n      obj.id === id ?\n        { ...obj, value: obj.value + 1, lastLoggedDate: date, updated: true }\n        : obj\n    );\n    localStorage.setItem(\"challenges\", JSON.stringify(newChallenges));\n    setChallenges(newChallenges)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"Header-title\">Challenges</h1>\n        {quote !== null ?\n          <div>\n            <p className=\"Quote-title\">{quote.quote}</p>\n            <p className=\"Quote-name\">{quote.name}</p>\n          </div>\n          : null\n        }\n      </header>\n      {challenges !== null ?\n        challenges.map((item, index) => (\n          <Card\n            key={index}\n            index={index}\n            id={item.id}\n            title={item.title}\n            startDate={item.startDate}\n            lastLoggedDate={item.lastLoggedDate}\n            value={item.value}\n            updated={item.updated}\n            update={() => update(item.id)}\n          />\n        ))\n        : null}\n      <div className=\"Add-challenge-container\">\n        {challenge ? (\n          <div className=\"Add-challenge\">\n            <input type=\"text\" placeholder=\"Add challenge\" onChange={(e) => setText(e.target.value)} />\n            <button type=\"button\" className=\"Save-button\" onClick={() => saveChallege()}>Save</button>\n          </div>\n        ) : null}\n        <button\n          aria-label=\"button\"\n          className=\"Plus-button\"\n          onClick={() => setChallenge(!challenge)}\n        >\n          {\n            challenge === true ?\n              <FontAwesomeIcon icon={faTimes} />\n              :\n              <FontAwesomeIcon icon={faPlus} />\n          }\n        </button>\n      </div>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","onClick","alert","className","style","console","log","undefined","index","backgroundColor","color","startDate","value","title","quotes","quote","name","App","useState","setQuote","challenge","setChallenge","text","setText","challenges","setChallenges","useEffect","random","Math","floor","length","map","item","getQuote","JSON","parse","localStorage","getItem","onChange","e","target","date","Date","dateString","getUTCDate","getUTCMonth","getFullYear","push","setItem","stringify","saveChallege","icon","faPlus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAGO,SAASA,EAAKC,GA6KnB,OACE,sBAAKC,QAAS,kBAAMC,MAAM,SAASC,UAAU,OAAOC,OA7BpDC,QAAQC,IAAI,mBACQC,IAAhBP,EAAMQ,OAAuBR,EAAMQ,MAAQ,IAAM,EAC5C,CACLC,gBAAiB,WAGZ,CACLA,gBAAiB,UACjBC,MAAO,UAqBX,UACE,4CAAeV,EAAMW,UAArB,MAAmCX,EAAMY,MAAzC,WACA,oBAAIT,UAAU,aAAd,SAA4BH,EAAMa,aA9EpCR,QAAQC,IAAI,e,WC9FVQ,G,MAAS,CACb,CACEC,MAAO,6DACPC,KAAM,eAER,CACED,MAAO,cACPC,KAAM,QAER,CACED,MAAO,6GACPC,KAAM,uBAgFKC,MA7Ef,WACEZ,QAAQC,IAAI,OADC,MAEaY,mBAAS,MAFtB,mBAENH,EAFM,KAECI,EAFD,OAGqBD,oBAAS,GAH9B,mBAGNE,EAHM,KAGKC,EAHL,OAIWH,mBAAS,IAJpB,mBAINI,EAJM,KAIAC,EAJA,OAKuBL,mBAAS,MALhC,mBAKNM,EALM,KAKMC,EALN,KAsCb,OA/BAC,qBAAU,YAMV,WACE,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWb,EAAOgB,QACjDhB,EAAOiB,KAAI,SAACC,EAAMxB,GACZA,IAAUmB,GACZR,EAASa,MATbC,GACA,IAAMT,EAAaU,KAAKC,MAAMC,aAAaC,QAAQ,eACnDZ,EAAcD,KACb,IA4BD,sBAAKrB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,oBAAIA,UAAU,eAAd,wBACW,OAAVY,EACC,gCACE,mBAAGZ,UAAU,cAAb,SAA4BY,EAAMA,QAClC,mBAAGZ,UAAU,aAAb,SAA2BY,EAAMC,UAEjC,QAGU,OAAfQ,EACGA,EAAWO,KAAI,SAACC,EAAMxB,GAAP,OACf,cAACT,EAAD,CAEES,MAAOA,EACPK,MAAOmB,EAAKnB,MACZF,UAAWqB,EAAKrB,UAChBC,MAAO,KAJFJ,MAOP,KACHY,EACC,sBAAKjB,UAAU,gBAAf,UACE,uBAAOmC,SAAU,SAACC,GAAD,OAAOhB,EAAQgB,EAAEC,OAAO5B,UACzC,wBAAQT,UAAU,cAAcF,QAAS,kBA1CjD,WACE,IAAMwC,EAAO,IAAIC,KACXC,EAAU,UAAMF,EAAKG,aAAX,YAA2BH,EAAKI,cAAgB,EAAhD,YAAqDJ,EAAKK,eAE1E,GAAa,KAATxB,EAAa,CACf,IAAME,EAAaU,KAAKC,MAAMC,aAAaC,QAAQ,eACnD,GAAmB,OAAfb,EACFA,EAAWuB,KAAK,CAAElC,MAAOS,EAAMX,UAAWgC,EAAY/B,MAAO,IAC7DwB,aAAaY,QAAQ,aAAcd,KAAKe,UAAUzB,QAC7C,CACL,IAAMJ,EAAY,CAAC,CAAEP,MAAOS,EAAMX,UAAWgC,EAAY/B,MAAO,IAChEwB,aAAaY,QAAQ,aAAcd,KAAKe,UAAU7B,MA+BD8B,IAA/C,qBAEA,KACJ,wBACE/C,UAAU,cACVF,QAAS,kBAAMoB,GAAcD,IAF/B,SAIE,cAAC,IAAD,CAAiB+B,KAAMC,YChFhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9f7120fb.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCrown } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport function Card(props) {\r\n  \r\n  const bronze = { name: 'Bronce', color: '#cd7f32', margin: '10px' }\r\n  const silver = { name: 'Silver', color: '#C0C0C0', margin: '10px' }\r\n  const gold = { name: 'Gold', color: '#FFDF00', margin: '10px' }\r\n  const diamond = { name: 'diamond', color: '#FFDF00', margin: '10px' }\r\n\r\n  function checkStatus() {\r\n    let status;\r\n    let statusArea;\r\n    let min;\r\n    let max;\r\n\r\n      if (props.value >= 0 && props.value <= 40) {\r\n          status = bronze;\r\n          statusArea = 1;\r\n          min = 0;\r\n          max = 40;\r\n      }\r\n      else if (props.value >= 40 && props.value <= 80) {\r\n          status = bronze;\r\n          statusArea = 2;\r\n          min = 40;\r\n          max = 80;\r\n      }\r\n      else if (props.value >= 80 && props.value <= 120) {\r\n          status = bronze;\r\n          statusArea = 3;\r\n          min = 80;\r\n          max = 120;\r\n      }\r\n      else if (props.value >= 120 && props.value <= 160) {\r\n        status = silver;\r\n        statusArea = 1;\r\n        min = 120;\r\n        max = 160;\r\n      }\r\n      else if (props.value >= 160 && props.value <= 200) {\r\n        status = silver;\r\n        statusArea = 2;\r\n        min = 160;\r\n        max = 200;\r\n      }\r\n      else if (props.value >= 200 && props.value <= 240) {\r\n        status = silver;\r\n        statusArea = 3;\r\n        min = 200;\r\n        max = 240;\r\n      }\r\n      else if (props.value >= 240 && props.value <= 280) {\r\n        status = gold;\r\n        statusArea = 1;\r\n        min = 240;\r\n        max = 280;\r\n      }\r\n      else if (props.value >= 280 && props.value <= 320) {\r\n        status = gold;\r\n        statusArea = 2;\r\n        min = 280;\r\n        max = 320;\r\n      }\r\n      else if (props.value >= 320 && props.value <= 365) {\r\n        status = gold;\r\n        statusArea = 3;\r\n        min = 320;\r\n        max = 365;\r\n    } else if(props.value > 365) {\r\n        status = diamond;\r\n        statusArea = 4;\r\n        min = 365;\r\n    }\r\n    return {\r\n      status,\r\n      statusArea,\r\n      min,\r\n      max\r\n    }\r\n  }\r\n\r\n\r\n  // function percent(status) {\r\n  //   let count = 0;\r\n  //   let fixedPercent;\r\n\r\n  //   if(props.value > status.min) {\r\n  //     fixedPercent = props.value - status.min;\r\n  //   }else {\r\n  //     fixedPercent = props.value;\r\n  //   }\r\n\r\n  //   for (let i = status.min; i <= status.max; i++) {\r\n  //     count = count + 1;\r\n  //   }\r\n  //   let percent = fixedPercent / count * 100;\r\n  //   return percent;\r\n  // }\r\n\r\n  function progress() {\r\n    console.log('progress');\r\n    // const status = checkStatus();\r\n    // const percents = percent(status);\r\n    // console.log(status.statusArea)\r\n    // console.log(percents)\r\n\r\n\r\n    // switch (status.statusArea) {\r\n    //   case 1:\r\n    //     return (\r\n    //       <div>\r\n    //         <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n    //         <p>{`${status.status.name} - ${status.statusArea}`}</p>\r\n    //         <div className=\"Progress-bar\">\r\n    //           <span style={progressBar(percents)}></span>\r\n    //         </div>\r\n    //       </div>\r\n    //     )\r\n    //   case 2:\r\n    //     return (\r\n    //       <div>\r\n    //         <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n    //         <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n    //         <p>{`${status.status.name} - ${status.statusArea}`}</p>\r\n    //         <div className=\"Progress-bar\">\r\n    //           <span style={progressBar(percents)}></span>\r\n    //         </div>\r\n    //       </div>\r\n    //     )\r\n    //   case 3:\r\n    //     return (\r\n    //       <div>\r\n    //         <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n    //         <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n    //         <FontAwesomeIcon className=\"Icon\" icon={faCrown} style={status.status} />\r\n    //         <p>{`${status.status.name} - ${status.statusArea}`}</p>\r\n    //         <div className=\"Progress-bar\">\r\n    //           <span style={progressBar(percents)}></span>\r\n    //         </div>\r\n    //       </div>\r\n    //     )\r\n    //   default:\r\n    //     break;\r\n    // }\r\n  }\r\n\r\n  function background() {\r\n    console.log('background')\r\n    if (props.index !== undefined && props.index % 2 === 0) {\r\n      return {\r\n        backgroundColor: \"#ffffff\",\r\n      };\r\n    } else {\r\n      return {\r\n        backgroundColor: \"#626262\",\r\n        color: 'white'\r\n      };\r\n    }\r\n  }\r\n\r\n  // function progressBar(percents) {\r\n  //   return (\r\n  //     {\r\n  //       position: 'absolute',\r\n  //       zIndex: 10,\r\n  //       left: 0,\r\n  //       backgroundColor: 'green',\r\n  //       width: `${percent}%`,\r\n  //       maxWidth: '100%',\r\n  //       height: '10px',\r\n  //       borderRadius: 0\r\n  //     }\r\n  //   )\r\n  // }\r\n\r\n  return (\r\n    <div onClick={() => alert('dsfa')} className=\"Card\" style={background()}>\r\n      <span>Started {props.startDate} - {props.value} days</span>\r\n      <h3 className=\"Card-title\">{props.title}</h3>\r\n      {progress()}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { Card } from \"./components/Card\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./App.css\";\n\nconst quotes = [\n  {\n    quote: \"The way to get started is to quit talking and begin doing.\",\n    name: \"Walt Disney\"\n  },\n  {\n    quote: \"Just do it.\",\n    name: \"Nike\"\n  },\n  {\n    quote: \"The pessimist sees difficulty in every opportunity. The optimist sees the opportunity in every difficulty.\",\n    name: \"Winston Churchill\"\n  }\n]\nfunction App() {\n  console.log('app')\n  const [quote, setQuote] = useState(null);\n  const [challenge, setChallenge] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [challenges, setChallenges] = useState(null);\n\n  useEffect(() => {\n    getQuote();\n    const challenges = JSON.parse(localStorage.getItem(\"challenges\"));\n    setChallenges(challenges);\n  }, []);\n\n  function getQuote() {\n    const random = Math.floor(Math.random() * quotes.length);\n    quotes.map((item, index) => {\n      if (index === random) {\n        setQuote(item);\n      }\n    });\n  }\n\n  function saveChallege() {\n    const date = new Date();\n    const dateString = `${date.getUTCDate()}.${date.getUTCMonth() + 1}.${date.getFullYear()}`;\n\n    if (text !== \"\") {\n      const challenges = JSON.parse(localStorage.getItem(\"challenges\"));\n      if (challenges !== null) {\n        challenges.push({ title: text, startDate: dateString, value: 0 });\n        localStorage.setItem(\"challenges\", JSON.stringify(challenges));\n      } else {\n        const challenge = [{ title: text, startDate: dateString, value: 0 }];\n        localStorage.setItem(\"challenges\", JSON.stringify(challenge));\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2 className=\"Header-title\">Challenges</h2>\n        {quote !== null ?\n          <div>\n            <p className=\"Quote-title\">{quote.quote}</p>\n            <p className=\"Quote-name\">{quote.name}</p>\n          </div>\n          : null\n        }\n      </header>\n      {challenges !== null\n        ? challenges.map((item, index) => (\n          <Card\n            key={index}\n            index={index}\n            title={item.title}\n            startDate={item.startDate}\n            value={160}\n          />\n        ))\n        : null}\n      {challenge ? (\n        <div className=\"Add-challenge\">\n          <input onChange={(e) => setText(e.target.value)} />\n          <button className=\"Save-button\" onClick={() => saveChallege()}>Save</button>\n        </div>\n      ) : null}\n      <button\n        className=\"Plus-button\"\n        onClick={() => setChallenge(!challenge)}\n      >\n        <FontAwesomeIcon icon={faPlus} />\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}